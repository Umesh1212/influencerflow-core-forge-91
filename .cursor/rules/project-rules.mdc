---
description: When making big changes use this rule 
globs: 
alwaysApply: false
---
Project Overview
This document outlines the rules and guidelines for the InfluencerFlow AI Platform.
The platform is built with a Vite-based frontend (React/TypeScript) and a Supabase-only backend.
Supabase will provide:
- PostgreSQL Database
- Authentication (Supabase Auth)
- File Storage (Supabase Storage)
- All server-side logic, API integrations (AI, payments, social media, e-signature), and custom API endpoints via Supabase Edge Functions (TypeScript/Deno).

Architecture & Tech Stack
Frontend Stack
- Vite as build tool and dev server (React with TypeScript)
- Tailwind CSS for styling with custom design tokens
- Shadcn/UI component library for consistent UI elements (or similar)
- TanStack React Query (or similar) for data fetching and caching against Supabase
- `supabase-js` client library for frontend-to-Supabase interaction

Supabase Backend Stack (Supabase-Only)
- **Database**: Supabase PostgreSQL for all structured data (users, creators, campaigns, contracts, messages, etc.).
- **Authentication**: Supabase Auth for user management, roles (brand, agency, creator, admin), Google OAuth, email/password.
- **Storage**: Supabase Storage for user-uploaded files, generated PDFs (contracts), voice messages.
- **Server-Side Logic & APIs**: Supabase Edge Functions (written in TypeScript/Deno) will be responsible for:
    - All business logic that cannot or should not run on the client.
    - Securely calling external AI APIs (OpenAI GPT-4, ElevenLabs, Whisper, Translation services).
    - Securely integrating with third-party services (Payment gateways like Stripe/Razorpay, Email services like SendGrid, Social Media APIs, E-signature services).
    - Creating any custom API endpoints needed by the frontend beyond direct database access via `supabase-js` (though direct access with RLS is preferred where possible).
    - Handling webhooks from third-party services.
- **Real-time Features**: Supabase Realtime for features like live chat or notifications.
- **Security**: Row Level Security (RLS) on all PostgreSQL tables, secure management of API keys and secrets within Supabase Edge Function environment variables.

Key Features (as per PRD, implemented via Supabase)
- Creator Discovery Engine (Supabase DB for storage, Edge Functions for AI search logic if needed)
- AI Outreach & Negotiation System (Edge Functions orchestrating LLM, Voice, Translation, Email APIs)
- Contract Automation (Edge Functions for PDF generation & e-signature integration)
- Payments Module (Edge Functions for payment gateway integration)
- Campaign Tracker & Performance Dashboard (Edge Functions for social API data pulls, Supabase DB for storage)
- Admin Panel (Direct Supabase DB access with RLS, or admin-specific Edge Functions)

Development Guidelines
- Prioritize direct Supabase client (`supabase-js`) interaction from the frontend for CRUD operations where RLS is sufficient.
- Use Supabase Edge Functions for:
    - Operations requiring elevated privileges or secret management.
    - Complex business logic involving multiple steps or data sources.
    - Orchestrating calls to external AI and third-party APIs.
- Ensure all Edge Functions are secure, efficient, and handle errors gracefully.
- Follow guidelines for writing Supabase Edge Functions, RLS policies, and database functions as per other relevant `.mdc` files ([`writing-supabase-edge-functions.mdc`](mdc:.cursor/rules/writing-supabase-edge-functions.mdc), [`create-rls-policies.mdc`](mdc:.cursor/rules/create-rls-policies.mdc), etc.).

# Added by Task Master - Development Workflow Rules

Below you will find a variety of important rules spanning:
- the dev_workflow
- the .windsurfrules document self-improvement workflow
- the template to follow when modifying or adding new sections/rules to this document.

---
DEV_WORKFLOW
---
description: Guide for using Task Master to manage task-driven development workflows.
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Interaction Methods:**
  - **MCP Tools (Recommended for Integrated Environments like Cursor):** Use the Task Master tools available in your MCP server (e.g., `mcp_taskmaster-ai_parse_prd`, `mcp_taskmaster-ai_get_tasks`). This offers structured data and better integration. Refer to `taskmaster.mdc` (or the tool documentation provided by your MCP server) for a full list of MCP tools and their CLI equivalents.
  - **`task-master` CLI (For Users & Fallback):** Use the global `task-master` command for direct terminal interaction. Install with `npm install -g task-master-ai` or use locally via `npx task-master-ai ...`.

- **Development Workflow Process**
  - Start new projects by running the `mcp_taskmaster-ai_initialize_project` MCP tool (or `task-master init` CLI command) and then `mcp_taskmaster-ai_parse_prd` (or `task-master parse-prd --input=<prd-file.txt>`) to generate initial `tasks.json`.
  - Begin coding sessions with `mcp_taskmaster-ai_get_tasks` (or `task-master list`) to see current tasks, status, and IDs.
  - Analyze task complexity with `mcp_taskmaster-ai_analyze_project_complexity --research` (or `task-master analyze-complexity --research`) before breaking down tasks.
  - Review the complexity report using `mcp_taskmaster-ai_complexity_report` (or `task-master complexity-report`).
  - Select tasks based on dependencies (all marked 'done'), priority level, and ID order.
  - Clarify tasks by checking task files in `tasks/` directory or asking for user input.
  - View specific task details using `mcp_taskmaster-ai_get_task --id=<id>` (or `task-master show <id>`) to understand implementation requirements.
  - Break down complex tasks using `mcp_taskmaster-ai_expand_task --id=<id>` (or `task-master expand --id=<id>`) with appropriate flags like `--force` and `--research`.
  - Clear existing subtasks if needed using `mcp_taskmaster-ai_clear_subtasks --id=<id>` (or `task-master clear-subtasks --id=<id>`) before regenerating.
  - Implement code following task details, dependencies, and project standards.
  - Verify tasks according to test strategies before marking as complete.
  - Mark completed tasks with `mcp_taskmaster-ai_set_task_status --id=<id> --status=done` (or `task-master set-status --id=<id> --status=done`).
  - Update dependent tasks when implementation differs using `mcp_taskmaster-ai_update --from=<id> --prompt="..."` (or `task-master update --from=<id> --prompt="..."`) or `mcp_taskmaster-ai_update_task --id=<id> --prompt="..."` (or `task-master update-task --id=<id> --prompt="..."`).
  - Add new tasks using `mcp_taskmaster-ai_add_task --prompt="..." --research` (or `task-master add-task --prompt="..." --research`).
  - Generate task files with `mcp_taskmaster-ai_generate` (or `task-master generate`) after updating `tasks.json`.
  - Maintain valid dependency structure with `mcp_taskmaster-ai_fix_dependencies` (or `task-master fix-dependencies`) when needed.
  - Respect dependency chains and task priorities when selecting work.
  - Report progress regularly using `mcp_taskmaster-ai_get_tasks` (or `task-master list`).

- **Task Complexity Analysis**
  - Run `mcp_taskmaster-ai_analyze_project_complexity --research` (or `task-master analyze-complexity --research`) for comprehensive analysis.
  - Review complexity report using `mcp_taskmaster-ai_complexity_report` (or `task-master complexity-report`).
  - Focus on tasks with highest complexity scores (8-10) for detailed breakdown.
  - Note that reports are automatically used by the expand task tools/commands.

- **Task Breakdown Process**
  - Use `mcp_taskmaster-ai_expand_task --id=<id>` (or `task-master expand --id=<id>`).
  - Add `--research` flag to leverage AI for research-backed expansion.
  - Use `--prompt="<context>"` to provide additional context when needed.
  - Review and adjust generated subtasks as necessary.
  - Use `mcp_taskmaster-ai_expand_all` (or `task-master expand --all`) to expand multiple pending tasks.
  - If subtasks need regeneration, clear them first with `mcp_taskmaster-ai_clear_subtasks --id=<id>` (or `task-master clear-subtasks --id=<id>`).

- **Implementation Drift Handling**
  - When implementation differs significantly, use `mcp_taskmaster-ai_update --from=<futureTaskId> --prompt="<explanation>"` (or `task-master update --from=<id> --prompt="<explanation>"`) or `mcp_taskmaster-ai_update_task --id=<taskId> --prompt="<explanation>"` (or `task-master update-task --id=<id> --prompt="<explanation>"`).

- **Task Status Management** (Refer to `taskmaster.mdc` or MCP tool documentation for full list of statuses)
  - Use 'pending', 'done', 'in-progress', 'review', 'deferred', 'cancelled'.

- **Task File Format Reference** (Individual Markdown files in `tasks/` - generated by `mcp_taskmaster-ai_generate` or `task-master generate`)
  ```markdown
  # Task ID: <id>
  # Title: <title>
  # Status: <status>
  # Dependencies: <comma-separated list of dependency IDs>
  # Priority: <priority>
  # Description: <brief description>
  # Details:
  <detailed implementation notes>
  
  # Test Strategy:
  <verification approach>
  ```

- **Command Reference (Examples using `task-master` CLI - refer to MCP tool names for equivalent integrated functionality):**
  - `task-master parse-prd --input=<prd-file.txt>`
  - `task-master update --from=<id> --prompt="<prompt>"`
  - `task-master generate`
  - `task-master set-status --id=<id> --status=<status>`
  - `task-master list`
  - `task-master expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
  - `task-master analyze-complexity --research`
  - `task-master clear-subtasks --id=<id>`
  - `task-master add-task --prompt="..."`
  - `task-master init`

- **Environment Variables & Configuration**
  - Refer to `.taskmasterconfig` for model and global settings.
  - API keys for AI providers (OpenAI, ElevenLabs, etc.) and third-party services (Stripe, SendGrid, etc.) should be stored as **secrets in the Supabase project settings** and accessed by Edge Functions as environment variables. Do NOT commit them to the repository or `.taskmasterconfig`.

- **Determining the Next Task**
  - Use `mcp_taskmaster-ai_next_task` (or `task-master next`).

- **Viewing Specific Task Details**
  - Use `mcp_taskmaster-ai_get_task --id=<id>` (or `task-master show <id>`).

- **Managing Task Dependencies**
  - Use `mcp_taskmaster-ai_add_dependency` / `remove_dependency` (or `task-master add-dependency` / `remove-dependency`).
  - Validate with `mcp_taskmaster-ai_validate_dependencies` (or `task-master validate-dependencies`) and fix with `mcp_taskmaster-ai_fix_dependencies` (or `task-master fix-dependencies`).

---
WINDSURF_RULES
---
description: Guidelines for creating and maintaining Windsurf rules to ensure consistency and effectiveness.
globs: .windsurfrules
filesToApplyRule: .windsurfrules
alwaysApply: true
---
The below describes how you should be structuring new rule sections in this document.
- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **Section References:**
  - Use `ALL_CAPS_SECTION` to reference files
  - Example: `WINDSURF_RULES`

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 

---
SELF_IMPROVE
---
description: Guidelines for continuously improving this rules document based on emerging code patterns and best practices.
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding a PRISMA section in the .windsurfrules:
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes


Follow WINDSURF_RULES for proper rule formatting and structure of windsurf rule sections.